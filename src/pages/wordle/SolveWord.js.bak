import React, { useEffect, useLayoutEffect, useRef, useState } from "react";
import { supabase } from "../../lib/supabaseClient";
import { useLanguage } from "../../context/LanguageContext";
import { WordleGame } from "./WordleGame";
import { useNavigate } from "react-router-dom";

export default function SolveWord() {
  const nav = useNavigate();
  const { lang, translations } = useLanguage();
  const t = translations.wordle || {};
  const langSafe = lang || "es";

  const [list, setList] = useState([]);
  const [idx, setIdx] = useState(0);
  const [answer, setAnswer] = useState(null);
  const [loading, setLoading] = useState(true);

  const rootRef = useRef(null);
  const headerRef = useRef(null); // << medir cabecera local

  useEffect(() => {
  const html = document.documentElement;
  const body = document.body;
  const prevHtmlOverflow = html.style.overflow;
  const prevBodyOverflow = body.style.overflow;

  html.style.overflow = "hidden";
  body.style.overflow = "hidden";

  return () => {
    html.style.overflow = prevHtmlOverflow;
    body.style.overflow = prevBodyOverflow;
  };
}, []);

  }, [langSafe]);

  const nextWord = () => {
    if (!list.length) return;
    setIdx((i) => {
      const n = (i + 1) % list.length;
      const w = list[n];
      setAnswer({ ...w, word: w.word_norm });
      return n;
    });
  };

  useLayoutEffect(() => {
  const el = rootRef.current;
  if (!el) return;

  const layout = () => {
    const vh = window.visualViewport?.height
      ?? Math.max(window.innerHeight, document.documentElement.clientHeight);

    const topbarH = document.querySelector(".game-topbar")?.getBoundingClientRect().height || 0;
    const headH   = el.querySelector("[data-wordle-head]")?.getBoundingClientRect().height || 0;
    const kbdH    = el.querySelector(".wordle-kbd")?.getBoundingClientRect().height || 0;

    const usableH = Math.max(0, vh - topbarH - headH - kbdH - 8); // sin constantes mágicas
    const usableW = Math.max(0, el.clientWidth - 24);

    const byH = Math.floor(usableH / 6);
    const byW = Math.floor(usableW / 5);
    const tile = Math.max(28, Math.min(byH, byW, 64));
    el.style.setProperty("--tile", `${tile}px`);
  };

  const ro = new ResizeObserver(layout);          // re-calc cuando cambie el teclado
  const kbd = el.querySelector(".wordle-kbd");
  if (kbd) ro.observe(kbd);

  layout();
  window.addEventListener("resize", layout, { passive:true });
  window.visualViewport?.addEventListener("resize", layout, { passive:true });
  return () => {
    ro.disconnect();
    window.removeEventListener("resize", layout);
    window.visualViewport?.removeEventListener("resize", layout);
  };
}, [answer]);


  return (
    <div
      ref={rootRef}
      style={{
        height: "100svh",
        padding: 12,
        paddingLeft: "max(12px, env(safe-area-inset-left))",
        paddingRight: "max(12px, env(safe-area-inset-right))",
        paddingBottom: "max(12px, env(safe-area-inset-bottom))",
        width: "100%",
        maxWidth: 480,
        margin: "0 auto",
        boxSizing: "border-box",
        display: "flex",
        flexDirection: "column",
        overflow: "hidden",
      }}
    >
      {/* título + botones centrados (medimos este bloque) */}
      <div
        ref={headerRef}
        style={{
          display: "flex",
          flexDirection: "column",
          alignItems: "center",
          gap: 12,
          marginBottom: 8,
          textAlign: "center",
        }}
      >
        <h2 style={{ margin: 0, fontSize: 16, fontWeight: 600, lineHeight: 1.2 }}>
          {answer
            ? `${t.resolver} ${t.de} ${answer.created_by_name} ${t.del_dia} ${new Date(
                answer.created_at
              ).toLocaleDateString()}`
            : t.resolver}
        </h2>
        <div style={{ display: "flex", gap: 12 }}>
          <button className="btn-secondary" style={{ height: 36, padding: "0 16px" }} onClick={() => nav("/wordle/crear")}>
            {t.crear || "Crear"}
          </button>
          <button className="btn-primary" style={{ height: 36, padding: "0 16px" }} onClick={nextWord}>
            {t.siguiente || "Siguiente"}
          </button>
        </div>
      </div>

      <div style={{ flex: 1, overflow: "hidden" }}>
        {loading && <p style={{ fontSize: 14 }}>Cargando…</p>}
        {!loading && !answer && <p style={{ fontSize: 14 }}>No hay palabras recientes.</p>}
        {answer && (
          <WordleGame
            key={`${answer.id}-${idx}`}
            answer={answer}
            lang={langSafe}
            className="wordle-root h-full"
          />
        )}
      </div>
    </div>
  );
}
